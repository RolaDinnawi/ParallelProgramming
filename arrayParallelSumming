#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define ARRAY_SIZE 1000000 // 1000, 100000, 1000000000
#define NUM_THREADS 4 // 2, 4, 32

typedef struct {
    int threadID;
    int* arr;
    int size;
    long long private_count;
} threadArgs;

void initializeArray(int* array, int size) {
    for (int i = 0; i < size; ++i) {
        array[i] = i + 1;
    }
}

void* threadFunction(void* arg) {
    threadArgs* data = (threadArgs*)arg;
    int start = data->threadID * (data->size / NUM_THREADS);
    int end = (data->threadID == NUM_THREADS - 1) ? data->size : start + (data->size / NUM_THREADS);

    for (int i = start; i < end; ++i) {
        data->private_count += data->arr[i];
    }

    pthread_exit(NULL);
}

int main() {
    int* array = (int*)malloc(ARRAY_SIZE * sizeof(int));
    if (array == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    initializeArray(array, ARRAY_SIZE);

    clock_t t;
    t = clock();

    pthread_t threads[NUM_THREADS];
    threadArgs thread_data[NUM_THREADS];

    for (int i = 0; i < NUM_THREADS; ++i) {
        thread_data[i].threadID = i;
        thread_data[i].arr = array;
        thread_data[i].size = ARRAY_SIZE;
        thread_data[i].private_count = 0;

        int result = pthread_create(&threads[i], NULL, threadFunction, (void*)&thread_data[i]);
        if (result != 0) {
            fprintf(stderr, "Error creating thread %d\n", i);
            return 1;
        }
    }

    for (int i = 0; i < NUM_THREADS; ++i) {
        pthread_join(threads[i], NULL);
    }

    long long global_count = 0;
    for (int i = 0; i < NUM_THREADS; ++i) {
        global_count += thread_data[i].private_count;
    }

    printf("Sum: %lld\n", global_count);
    printf("Number of Threads: %d\n", NUM_THREADS);

    t = clock() - t;
    double time_taken = ((double)t) / CLOCKS_PER_SEC;
    printf("Time taken: %f seconds\n", time_taken);

    free(array);

    return 0;
}
